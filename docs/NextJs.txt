NextJs

1. Init dự án
    npm install -g pnpm
    npx create-next-app@latest an1-next —example "https://github.com/vercel/next-learn/tree/main/dashboard/starter-example" --use-pnpm
    pnpm I
    pnpm dev

2. Styling
    2.1. Tailwind
    2.2. CSS modules -> Tự động tạo class name local cho DOM của component
		import styles from "@app/ui/home.module.css"
		<div className={styles.shape}></div>
    2.3. clsx -> toggle class name
		import clsx from "clsx"
        <span className={clsx(
            "color: red",
            {
                "bg-red": status === "error",
                "bg-success": status === "success",
            }
        )}/>
    2.4. import css hoặc scss thông thường
    2.5. sử dụng thư viện css in js như styled-components

3. Font and Image
    3.1. Font google
        Tạo file fonts.ts trong app/ui
            import { Inter } from "next/font/google"
            export const inter = Inter({ subsets: ['latin] })
        Sử dụng
            import { inter } from "@/app/ui/fonts"
            <body className={inter.className}></body>
    3.2. tự động tối ưu (lazy, reponsive) với nuxt/image
        import Image from "nuxt/image"
        <Image
            src="/hero-mobile.png"
            width={560}
            height={620}
            className="block md:hidden"
            alt="Ảnh"
        />
4. Layout và Pages
    4.1. Dùng file-system routing folders để tạo routes lồng nhau. Page.tsx là file chưa DOM của route có tên là tên folder.
    4.2. Tạo UIs cho page route bằng layout.tsx
        Layout to share UI across multiple pages
        Thêm các meta head dùng chung cho site ở Root Layout
5. Navigation
    5.1. Dùng next/link component để điều hướng giữa các trang -> Không tải lại toàn bộ trang (Muốn tải lại toàn bộ trạng dùng thẻ a)
        Khi <Link/> xuất hiện ở đâu thì trình duyệt sẽ tự động tại nội dung của route trong link ở chế độ nền, khi chuyển trang sẽ gần như có nội dung ngây lập tức.
    5.2. Dùng usePathname() hook để active nav hiện tại
        usePathname là hook nên khi sử dụng cần khai báo 'use client';
6. Init database
    Dùng Vercel.com connect đến Github repo để Deloy dự án lên Vercel host
    Tạo Database PostgresSQL trên Vercel
    Lấy config data ở Menu > Storge > .env.local
    Tạo .evn trong dự án
    Run seed route để khởi tạo Table và Data cho Database
7. Fetch Data
    7.1. API layer
        Dùng cho request client đến server
        Dùng cho request đến 3th service API
    7.2. SQL or ORM
        Tạo endpoint API ở NextJs
        Dùng trong React Server Components
    7.3. Using Server Component to fetch data
        Hỗ trợ promises nên dùng async/await để fetch data. Không cần sử dụng useEffect, useState
        Login được xứ lý ở Server và gửi kết quả về client -> Nên có thể lấy data luôn mà không cần thông qua API layer
    7.4. Using SQL
        Sử dụng @vercel/postgres SDK để query
8. Streaming, loading.txs, Suspense, loading skeleton
    Chia route thành nhiều chunks và stream dần dần các chunks đã sẳn sàng đến Client mà không cần đợi đến khi tất cả các thành phần của page được load hết
    Khắc phục được tình trạng slow data Fetch
    Có 2 cách thực hiện stream
        Page thì thực hiện bằng loading.tsx
            Loading sẽ có tác dụng đối với các page con trong thư mục chính
            Nếu dữ dụng route group (overview) thì sẽ chỉ app dụng lên những page trong thư mục route group
        Component thì thực hiện bằng Suspense Component
            Dùng Group Component để thực hiện Suspense nhiều component dùng loại. (items)
9. Partial Prerendering
    Kết hợp Static, Dynamic rendering, Stream trong cùng một route
    Dùng Suspense trì hoãn những phần Render cho đến khi chúng thoả mãn điều kiện Render (data is loaded)
    Suspense fallback sẽ được thêm vào HTML Static content -> Tạo ra các Static shell -> Dynamic content trì hoãn việc render lại cho đến khi User visit route
    NOTE: Partial Prerendering đang được thử nghiệm.
    9.1. Thực hiện Partial Prerendering
        Config
            const nextConfig = {
                experimental: {
                    ppr: 'incremental',
                },
            };
        Quy định render trong layout.tsx
            export const experimental_ppr = true;
        
    

    

    





		